name: Pipeline

on:
  push:
    branches: [ feature/deployment ]

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest --cov=./
        continue-on-error: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: htmlcov/
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: 'arn:aws:iam::398306423585:role/github-actions-role'
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      - name: Build and Push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t jocsakesley/logistics:$IMAGE_TAG \
            -t jocsakesley/logistics:latest .

      - name: Deploy to ECS using Docker
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
              # Criar contexto ECS
              docker context create ecs logistics-ecs \
              --default-cluster desafio

              # Usar o contexto ECS
              docker context use logistics-ecs

              # Converter e fazer deploy usando docker compose
              docker compose convert > ecs-compose.yml
              
              # Deploy usando docker compose
              DOCKER_CONTEXT=logistics-ecs docker compose -f ecs-compose.yml up

              # Aguardar o deploy completar
              sleep 30  # dar tempo para o servi√ßo iniciar
              docker compose ps
